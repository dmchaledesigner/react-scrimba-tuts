/* ===============Settin up React on the MAC=============================Open terminal. Make sure we have Node and NPM installed.Select a directory where you want to install your appType 'sudo npm install -g create-react-app'  // we need this to install react scripts globallyUse 'cd' and navigate to the folder where you want the app to resideThen type 'create-react-app name-my-app' // this will create a folder with the app insideLet the programme run its course.Then type cd ..path to folder' => return, then npm start' making sure we are in the same directory!To stop the app runnning npm run exit*//* =============================================Settin up Boostrap / Reactstrap with React=======================================================If using a previous version of Bootrap, ie 3.1+, we can just down load the minified css and js files and import them into our project.Place the css into the src folder and in index.js 'import from ' ./bootstrap.min.css' ' and add the js into the closing boy of the index.html Using Reactstrap. Runs from npm and always updates automatically.Idea is that we install Boostrap on your machine via npm with query as another install.The create your react app and install reactstrap, Same as before we then import into our index.js file as import 'bootstrap/dist/css/bootstrap.css'Full instructions and components are here: https://reactstrap.github.io/*//* =================================Importing react and the react DOM================================= */import React from 'react'import ReactDOM from 'react-dom'/* The Render Medthod*/reactDOM.render(		// what I want to render,		// where i want to render it	)/* =================================A functional component=================================*/function MyComponent(){ // functional component only requires to return the function      return(      <React.Fragment> { /* this is how we comment in jsx.  */ }          <h1>David</h1>          <p>Just some blurb about me that is irrelevant</p>          <ul>            <li>Australia</li>            <li>Italy</li>            <li>Slovakia</li>          </ul>      </React.Fragment>          )}ReactDOM.render(  <MyComponent />,  document.getElementById('root'))/* =================================In ES6 Arrow Function=================================*/MyComponent = () =>{ // functional component only requires to return the function      return(      <React.Fragment> { /* this is how we comment in jsx.  */ }          <h1>David</h1>          <p>Just some blurb about me that is irrelevant</p>          <ul>            <li>Australia</li>            <li>Italy</li>            <li>Slovakia</li>          </ul>      </React.Fragment>          )}/* ============================================Structing Components - importing and exporting============================================== *//* Notes: Its best practice to have each component in its own file, exported and then imported into where its needed .WHen saving a component, its necessary to save it as is its name inside a folder called components although some methods may be different.WHen using JSX, we need to import react before the component and then use the export script after the componennt has been created. For example....*//* The will be a file called Myinfo.js inside a components folder*/import React from "react" // note we are importing react because we are using JSXfunction MyInfo() {  return (    <React.Fragment>      <h1>Bob Ziroll</h1>      <p>This is a paragraph about me...</p>      <ul>        <li>Thailand</li>        <li>Japan</li>        <li>Nordic Countries</li>      </ul>    </React.Fragment>{/* Use <React.Fragment instead of general <div> to prevent unwanted Divs in our code. Fragment doesnt show */}  )}export default MyInfo // // note we are now exporting the component/* The will be the index.js that sits in the root directory alongside the index.html file *///dependanciesimport react from 'react'import reactDOM from 'react-dom'// componentsimport MyInfo from './components/Myinfo' // go out of the root and into the components folder...and we dont need to add the js extention at the end.ReactDOM.render(		<MyInfo />, // this is the imported component		document.getElementById('root') // this is were it will be rendered on the htmml page	)/* ============================================Parent and Child Components - importing and exporting============================================== *//* We should have a main <App /> compoment where all over components are colled in, children to the parent. For instance...the main componant here is App.... child components are Navbar, mainContent and Footer */import react from 'react'import reactDOM from 'react-dom'function App(){	return(	 		<React.Fragment>		            <Navbar />		            <MainContent />		            <Footer />	        </React.Fragment>		)}/* In each child component is where we will find the jsx for that component but remember to name it and export it correctly.For example the header component will look like this....*/import React from 'react'function Navbar(){	return(				<nav className="navbar navbar-expand-lg navbar-light bg-light">					  <a className="navbar-brand" href="#">Navbar</a>					  <button className="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">					    <span className="navbar-toggler-icon"></span>					  </button>					  <div className="collapse navbar-collapse" id="navbarSupportedContent">					    <ul className="navbar-nav mr-auto">					      <li className="nav-item active">					        <a className="nav-link" href="#">Home <span class="sr-only">(current)</span></a>					      </li>					      <li className="nav-item">					        <a className="nav-link" href="#">Link</a>					      </li>					      <li className="nav-item">					        <a className="nav-link disabled" href="#">Disabled</a>					      </li>					    </ul>					  </div>				</nav> /* NOTE: Dont forget the convert class to className since we are using JSX */		)}export default Navbar /* Dont forget to export the component */ /* Now we need to go nack to our App.js where the <App /> / 'parent' component is based, import the child components, then add them to the parent conponent called App *//* Our AP[P.js File */import react from 'react'/* Import child compnents*/import Navbar from './Navbar'import Navbar from './MainContent'import Navbar from './Footer'/* Import CSS*/import './App.css'/* Main App Component */function App(){	return(	 		<div className="app">		            <Navbar />		            <MainContent />		            <Footer />	        </div>		)}/* then finally in your index.js file we render the App to the ID of root in the html*//* Import React*/import react from 'react'import react from 'react-dom'ReactDOM.render(	<App/>, document.getElementById('root')	)/* ============================================Styling Components usihg CSS Classes============================================== *//* This is our app component with three child compenents*/function App(){	return(	 		<div>	            <Navbar />	            <MainContent />	            <Footer />	        </div>		)}/* We cannot add css to actual imported comonents, we have to add them to JSX inside the component itself.For example, we cannot do this ...<header class ="header">We can only do this (header.js)...*/function header(){	return(	 		<header className="main-header">	 		<h1>This is the header</h1>	 		</header>	         		)}export default header/* Then in your CSS file, we can add the style as needed 		header.main-header{	width: 100%;	display: block;	padding: 20px;	color: white;	background: purple;	}*//* also we can add another stylesheet and import it in the App.js file.Something like this....	import React from 'react'	import ReactDom from 'react-dom'	import './newStyles.css'*//* ============================================Styling Componnents usihg inline CSS============================================== *//* The best way is to create a variable and add the styles as an object,Bare in nind, we are using JSX so unlike styles in html, we are required to use an object, like using css in jQuery, same thing.For example... if the name of the variable is 'styles' then the jsx call has to be the same name as the variable. */function header(){	const styles = {			color : 'white',			backgroundColor : "blue",			width : '100%',			height : 50,			padding : '20px'	}	return(	 		<header style={styles}>	 		<h1>This is the header</h1>	 		</header>	         		)}export default header/* ============================================Props in React============================================== *//* Props let us manipulate the attributes of a JSX component so we can fill them dynamically.Say we have an App.js file and we give it four contact cards. Instead of calling in four cards, with different information, we cam create a singlecard component and use props to change the content onn each card. For example.... */ import React from "react"function App() {    return (        <div className="contacts">            <div className="contact-card">                <img src="http://placekitten.com/300/200"/>                <h3>Mr. Whiskerson</h3>                <p>Phone: (212) 555-1234</p>                <p>Email: mr.whiskaz@catnap.meow</p>            </div>                        <div className="contact-card">                <img src="http://placekitten.com/400/200"/>                <h3>Fluffykins</h3>                <p>Phone: (212) 555-2345</p>                <p>Email: fluff@me.com</p>            </div>                        <div className="contact-card">                <img src="http://placekitten.com/400/300"/>                <h3>Destroyer</h3>                <p>Phone: (212) 555-3456</p>                <p>Email: ofworlds@yahoo.com</p>            </div>                        <div className="contact-card">                <img src="http://placekitten.com/200/100"/>                <h3>Felix</h3>                <p>Phone: (212) 555-4567</p>                <p>Email: thecat@hotmail.com</p>            </div>        </div>    )}export default App/* The above is going to spit out 4 contact cards. What we need is, is one component file for a single contact card,then add the props depending on those needs to show the data, then finally add more of the same component, just change the props results as needed *//* So, revisit the App.js file...1. Leave one of the components only ie, <contactCard />3. Add the props to the parent component eg,  <h3>{props.name}</h3>2. Add content to the imported component <scoreCard name="David" />   */import React from 'react'/* Add the props in the main parent component */function ScoreCard(props){		return(			<div className="contact-card">	            <img src={{props.imageUrl}}/>	            <h3>{props.name}</h3>	            <p>Phone: {pops.telephone}</p>	            <p>Email: {props.email}</p>	        </div>                        )}export default ScoreCard/* NOW we go to our app component */import React from 'React'import ReactDOM from 'react-dom'import ScoreCard from './ScoreCard' // this is the individual scorecardfunction App() {    return (        <div className="wrapper">	      	  <ScoreCard	      	  	imgUrl="http://placekitten.com/300/200"	      	  	name="Mr. Card 1"	      	  	tel="(212) 555-1234"	      	  	mail="card1@catnap.meow"	      	  />	      	  <ScoreCard	      	  	imgUrl="http://placekitten.com/300/200"	      	  	name="Mr. Card 2"	      	  	tel="(212) 555-1234"	      	  	mail="card2@catnap.meow"	      	  />        </div>    )}export default App/* Then the App gets exported to the index.js file where it is rendered *//* The key here is to add all instances of the component to the main conponent. */function App(){	return(			<div class="wrapper">				<component />				<component />				<component />			</div>		)}/* Then replace each component with the dynamic content with a prop result */function App(){	return(			<div class="wrapper">				<component					firstName = "David"					secondName = "Mchale"					mail = "dmchaledesigner@gmail.com"					/>				<component />				<component />			</div>		)}/* Then go back to the single component and use props *//* From this...*/function component(){	return(			<profile>				<h1>David</h1>				<h2>Mchale</h2>				<p>dmchaledesigner@gmail.com</p>			</profile>		)}/* To this...using the props keyword and curly braces to indicate JS*/function component(props){	return(			<profile>				<h1>{props.firstName}</h1>				<h2>{props.secondName}</h2>				<p>{props.mail}</p>			</profile>		)}// in  an arrow function we can write it like this...component = (props) => {	return(			<profile>				<h1>{props.firstName}</h1>				<h2>{props.secondName}</h2>				<p>{props.mail}</p>			</profile>		)}/* IF WE ARE ADDING LOTS OF THE SAME INDIVIDUAL COMPONENTS WITH DIFFERENT PROPS, WE CAN USE AN ARRAY with OBJECTS INSIDE,WHICH WOULD BE PROVIDED IN A JSON FILE similar to the below. WE just make sure ALL objects are inside an array that we can target.Then we can export it from the json file into the App file*/const contact = [    {        id: 1,        text: "Take out the trash",        completed: true    },    {        id: 2,        text: "Grocery shopping",        completed: false    },    {        id: 3,        text: "Clean gecko tank",        completed: false    },    {        id: 4,        text: "Mow lawn",        completed: true    },    {        id: 5,        text: "Catch up on Arrested Development",        completed: false    }]export default contact/* REMEMBER: When creating the object we need to add 2 x curly braces. To go from JSX to JS and then into an Object *//* Now we must change the component because we have added an object in the main App component.Use console.log(props) to check*/function component(props){	return(			<profile>				<h1>{props.contact.text}</h1>				<h2>{props.contact.id}</h2>				<p>{props.contact.completed}</p>			</profile>		)}/* Mapping map()   Mapping is used to dislay items from an object inside an array that is credated using JSON that holds the data of mulitple items   For instance an array called Profile, that could have key values such as name : daivd, description : blah blah, age : 40 ...etc      The schoolProducts.js file will look like this... Note how the array is exported at the end like a functional component*/	const products = [    {        id: "1",        name: "Pencil",        price: 1,        description: "Perfect for those who can't remember things! 5/5 Highly recommend."    },    {        id: "2",        name: "Housing",        price: 0,        description: "Housing provided for out-of-state students or those who can't commute"    },    {        id: "3",        name: "Computer Rental",        price: 300,        description: "Don't have a computer? No problem!"    }]export default products		/* Now we must create the single compenent for the product using props.	   The Product.js file 	   Here we add in the props that relate to the key value pairs of the object inside an array */	   import React from "react"		function Product(props){            return(                        <div className="Product">            <h2>{props.product.name}</h2>            <h3>{props.product.price}</h3>            <p>{props.product.description}</p>        	        </div>                )    		}		export default Product		/* Note we are getting product in props.product.X from the array inside map() */		/* Now our App.js file           The is where we use the map() method on the array		*/		import React from "react"		import Product from './Product' /* import the product component */ 		import ProductsData from "./vschoolProducts" /* import the product data */		function App() {		    		    /* use map() and place the results inside a variable and return that variable to App function */		    const productComponents = ProductsData.map(		            product => <Product name={product.name} key={product.id} description={product.description}/>		            )				  return (						    <div>						        {productComponents}						    </div>				  )		}		export default App		/* index.js file as usual is..*/		import React from 'react'		import ReactDOM from 'react-dom'		import App from "./App"		ReactDOM.render(<App />, document.getElementById('root'))		/* To explain array map()...		if we have an array*/		let array = [1,2,3,4,5,5,6];		/*we fun the method map with a function and put it inside a variable and do somthing, like double the number */		const newArray = array.map(function(num){				return num * 2;		})		console.log(newArray); /* The result will be 2,4,6,8,10,12 */		/* IN ES6 we use arrow functions like we do for React */		const myVar = newArray.map(		            num => <Product name={num.name} key={num.id} description={num.description}/>		            )					/* num is just a keywork we can we can use like any word we want, but remember to go back into the single					product file and at it to its props, so would be props.product.name */		/* Class Components. 			- Similar to that of stateless function components apart from adding in the render method 			- When adding Props we use 'this'			- we also add js code before the render method and call it inside the render method		*/		function Header(props){					return(						return (						        <header>						            <p>Welcome, {props.username}!</p>						        </header>				    	) // close return					) // close return		} // close component		/* Converted to this...*/		class Header extends React.Component{			   render(){			       			        return (					        <header>					            <p>Welcome, Dave</p>					        </header>			    	) // close render			    			   } // close render		} // close component		/* Using Props...		Since we dont add 'props' as a parameter, we use 'this.props' to reference the component itself */		class Header extends React.Component{			   render(){			       			        return (					        <header>					            <p>Welcome, {this.props.username}!</p>					        </header>			    	) // close render			    			   } // close render		} // close component		/* Examples of class components */		//Class Components in REACT		// =========================			// injecting html into a class component is simple			// 1. create the class			// 2. add the html to the render => return			// 3. render the class to the DOM			// 1. create the class - start with uppercase like a JS object				class MyClassName extends React.Component{					render(){							// this is where any calc need to be done							return(									// jsx goes here								);					}				}; // close the class component			// full example			class QuoteMaker extends React.Component{				render(){					return(						// html goes here						);				}			}; // close component			// Render the Class Component to the DOM			ReactDOM.render(				<QuoteMaker/>,				document.getElementById('app')				);			// Use a Variable Attribute in a Component			//==========================================			// 1. Create the object that holds the attributes of an image				const panda = {					src: 'https://upload.wikimedia.org/wikipedia/commons/b/b2/Endangered_Red_Panda.jpg',					alt: 'Red Panda',					width: '200px',					class: 'img-responsive'				};				class RedPanda extends React.Component{					render(){						return(																<div>										<h2>{panda.alt}</h2>										<img											src={panda.src}											alt={panda.alt}											width={panda.width}											class={panda.class}											/>								</div>															);					}				}; // close component	// Render the Class	ReactDOM.render(		<RedPanda/>,		document.getElementById('app')		);		// Put Logic in a Render Function		//=================================		// A render() function must have a return statement.		// However, that isn't all that it can have.		// A render() function can also be a fine place to put simple calculations that need to happen right before a component renders.		// Here's an example of some calculations inside of a render function:		class Random extends React.Component {		  render() {			    // First, some logic that must happen			    // before rendering:			    const n = Math.floor(Math.random() * 10 + 1);			    // Next, a return statement			    // using that logic:		    	return (		    			<h1>The number is {n}!</h1>;		    			)		  }		}		//example		//create a variable using objects inside an array		var friends = [			{	// object 1				title: "kevin jones",				src: "https://s3.amazonaws.com/codecademy-content/courses/React/react_photo-monkeyweirdo.jpg"			},			{				//object 2				title: "kevin david",				src: "https://s3.amazonaws.com/codecademy-content/courses/React/react_photo-monkeyweirdo.jpg"			},			{				//object 3				title: "james david",				src: "https://s3.amazonaws.com/codecademy-content/courses/React/react_photo-monkeyweirdo.jpg"			}		]; // close array		//create the class component		class Friend extends React.Component{			render(){				// create var to select object in array -- note we do this inside the render function of the component				var friend = friends[1]; // this will select the 2nd object in the array called "friends"				return(							// jsx here							// we are using the friend var to pick up on the 2nd oject and using the key to get the values							<div>								<h1>{friend.title}</h1>								<img								src={friend.src}								/>							</div>					);			}		}; // close component		// render the class component to the DOM		ReactDOM.render(					  <Friend />,		  document.getElementById('app')		);// Using Conditionals in a Render Function//=========================================// Notice that the if statement is located inside of the render function, but before the return statement.// This is pretty much the only way that you will ever see an if statement used in a render function.// create the math.random() that gives a 50/50 true or falseconst fiftyFifty = Math.random() < 0.5;// Create the Class componentclass TonightsPlan extends React.Component{		render(){						let task; // define task var						if( fiftyFifty === true){ // the coniditonal							task = 'out Wooo Hooo'						}else{							task = 'to bed Wooo'						}							return(									// return the result									<h1>Tonight I'm goin {task}</h1>									);						}				} // close render		}}; // close component// render the component to the DOMReactDOM.render(	<TonightsPlan/>,	document.getElementById('app')	);// Using THIS inside a Component		/* Functional Programming		===========================*/		/* Quick lesson on functional programming based on the above map() and filter() methods		   Functional programming function taking another function as an argument or returns a function as a result			Functions are obects and values also they can be passed on to use with others		   */		   array.filter(function(currentValue),{		   		return true; // returns new array of true values based on true or false		   });		   /* Example of Filter*/		   var testScores = [45,34,23,78,09,,56,78,98];		   var passingTest = function(test){		   	return test > 60		   }		   var graduation = testScores.filter(passingTest)		/* An example of using conditions inside the render() method		============================================================*/		class Greeting extends React.Component {    		    render(){		        				    const date = new Date();				    const hours = date.getHours();				    let timeOfDay;				    				    if (hours < 12) {				        timeOfDay = "morning";				    } else if (hours >= 12 && hours < 17) {				        timeOfDay = "afternoon";				    } else {				        timeOfDay = "night";				    }				    return(				        	<h1>Good {timeOfDay} to you, sir or madam!</h1>				   		 )		    		    }		}/*State	Unlike 'props' where a a value is added, State can change	Here his how is it written  *//* First we add the consstructor() and then the super() which is global,thien we write this.state referencing an object and place key value pairs inside to access the data,Finally we add the data to our JSX using this.state.answer which is an object value. the object will always start of as this.state = {}*/class App extends React.Component{	constructor(){		super()			this.state = {				answer: 'yes'			}	}	render(){	return(		 <div>                <h1>Is state important to know? {this.state.answer}</h1>            </div>            )	}}/*Another example of state , when a user is or isnt logged in.WE Can we use a oniional statement here                  */import React from "react"class App extends React.Component {    constructor() {        super()        this.state = {            isLoggedIn: false        }    }        render() {        let wordDisplay        if (this.state.isLoggedIn === true) {            wordDisplay = "in"        } else {            wordDisplay = "out"        }        return (            <div>                <h1>You are currently logged {wordDisplay}</h1>            </div>        )    }}export default App/* Using a class component with state to get the results of an object inside an array======================================================================================*//* 1. Create the class component2. Import the JSON file as an object inside an array3. Use 'state' to get the array4. Output the value of the object */import React from "react"import TodoItem from "./TodoItem" /* importing a single toDo item when we create one */import ToDoData from "./ToDoData" /* importing the toDaData json file */class App extends React.Component {    constructor() { /* always use conctructor when using state*/        super()        this.state = {            todos: ToDoData /* Adding the ToDoData Json object to the value of of a key */        }    }        render() {        const todoItems = this.state.todos.map(item => <TodoItem key={item.id} item={item}/>) /* using this.state.todos to access the all data*/                return (            <div className="todo-list">                {todoItems}            </div>        )        }}export default App /*===============================EVENTS in REACT================================*/ /* Events in React are similar to those used in Vanilla JS ie, onClick, onMouseOver, onMouseOut, onBlur, onChange etc  // https://reactjs.org/docs/events.html#supported-events eg */function doSomething(){	console.log('This button was clicked');function app(){	return(		<div>		<img src="https://www.fillmurray.com/200/100"/>		<br /><br />		<button onClick="doSomething()">Click Me</button>		</div>		)}export default App/* Now if we go back to our Todo List we have the issue of our check boxes. Some can be clicked and some cant.On the input tag,  having something like the blow  will not work.*/   <input type="checkbox" checked={props.item.completed}/>  /* We need to add an event,because thats exactly what it is.So we look at the events page on the REACT DOCS here: https://reactjs.org/docs/events.html#supported-events  */ <input type="checkbox" checked={props.item.completed} onChange='doSomething()')/>  /* If we notice in the REACT console, the error is gone but the click still isnt working *//*===============================BINDING ================================*//* inside a class component we have 3 steps..   1. constructor   2. render   3  return   if we want to add our own methods its best to do it after the constructor and before render,   although if we want to add conditional rendering we can do that inside the render method.   When we add a function it NOT automatically bound to the class component it sits in so we have to bind it inside the constructor method.   Example, Create an Event on a button and get it to output somerthing to the console	*/	class App extends React.Component{			constructor(props){				super(props)				this.state = [],				this.clickHandler = this.clickHandler.bind(this) // binding the clickHandler function to the class component			} // end constructor			clickHandler(){				console.log('this is working');			}			render(){				return(						<button onClick={this.clickHandler}>Click Me!</button>					)			}	} // close component	export default App/* ===========================Changing State with setState()==============================*//* State allows us to change value, but we dont change the initial state itself. WE RESET IT and then change it What we want to do: When we click the button, the counter increments by 11. Create the app - considering we are working with state we need a class componenet with a contructor method2. In the return(), add in the counter and a button, both using a name for a function we will create for each one.3. Create a function to modify, and use our setState()4. Bind the function to the class Component*/Import React from 'react'class App extends React.Component{	// constructor	constructor(){		super()		this.state = {			count: 0		}		// bind the function to the class component		this.handleClick = this.handleClick.bind(this)	} // close consrtructor	// our setState function	handleClick(){			this.setState(prevState => {				return{					isLoading: false					}					}) 	}	// render 	render(){			return(					<div>						<h1>{this.state.count}</h1>						<button onClick={this.handleClick}>Click me</button>					</div>				)	}}export default App/* To practice: we can add another button that decrements the number which means adding another function and another bind method *//* CHANGING STATEWhen we change state using setState we can determine wif we need to just change its state or reset its current state and set state again.Say for instance if the state has an object inside it that is decalred but not holding data, we can just use set state, but if the current state has say, a numberinside it that we want to change or start again then we need to use 'prevState'.Here is 2 functions, one uses preState and one just setsState*/// where current state is set to count: 0handleClickCount(){			this.setState(prevState => {				return{					count: prevState.count +1					}					}) 	}// funcntion for a form where the state is just reformed to whats in the input field and passed on.handleClickInput() {    this.setState({      value: event.target.value    });  }/* =======================Lifecycle Methods()=======================*//* https://engineering.musefind.com/react-lifecycle-methods-how-and-when-to-use-them-2111a1b692b1 https://reactjs.org/blog/2018/03/29/react-v-16-3.html#component-lifecycle-changes *//* Every component goes through a lifecycle. From when its born to when its finished.These are some of the methods we can use on a component.For instance, while a component is loading data from an API,we can use componentDidMount() to set a timeOut function whereby we can display a loading message until the component finishes loading the data to be displayed*/  class App extends Component {    constructor() {        super()        this.state = {            isLoading: true        }    }        componentDidMount() {        setTimeout(() => {            this.setState({                isLoading: false            })        }, 1500)    }        render() {        return (            <div>                <Conditional isLoading={this.state.isLoading}/>            </div>        )    }}export default App/* =======================Conditional Rendering=======================*/import React from "react"/*Challenge:Given a stateless functional component:1. Follow the steps necessary to add state to it,    // class-based component    // constructor method2. Have state keep track of whether the user is logged in or not    // isLoggedIn: Boolean (true or false)3. Add a button that logs the user in/out    // event listener (onClick)    a. extra challenge - make the button display "log in" if they're not logged in and "log out" if they are        // Conditional Rendering4. Display text that says "Logged in" if the user is logged in, or "Logged out" if they're not.    // Conditional Rendering*/class App extends React.Component {    constructor() {        super()        this.state = {            isLoggedIn: false        }        this.handleClick = this.handleClick.bind(this)    }        handleClick() {        this.setState(prevState => {             return {                isLoggedIn: !prevState.isLoggedIn            }        })    }        render() {           let buttonText = this.state.isLoggedIn ? "LOG OUT" : "LOG IN"        let displayText = this.state.isLoggedIn ? "Logged in" : "Logged out"        return (            <div>                <button onClick={this.handleClick}>{buttonText}</button>                <h1>{displayText}</h1>            </div>        )    }}export default App/* Whats happening in the above....1 class component is created with render and constructor methods.2 a boolean is created in object state to identity logged in our out3 a function is created for the onClick event on the button and bound to the class conponent using bind() inside the function we use setState and '!' which means the opposite of, and return the result to the function which is then added to the onClick Event.4 Ternirary operator version of IF statement  					let buttonText = this.state.isLoggedIn ? "LOG OUT" : "LOG IN"  					Translated means: inside a var, IF this.state.isLoggedIn is true '?' (? being the true)  					then, LOG OUT....else (':'') LOG IN  					IN other words, if condition is true do something, if not, do something else  					condition ? result : other result  					or...  										var age = 7;					var kindergarten_eligible;					 					if (age > 5) {					kindergarten_eligible = "Old enough";					}					else {					kindergarten_eligible = "Too young";					} 					Using the ternary operator, you could shorten the expression to:					var kindergarten_eligible = (age < 5) ? "Too young" : "Old enough";					if condition is true... too young, else old enough*//* ============================================API calling and Rendering - ComponentDidMount()=======================================================*//* For testing purposes we can get a number of urls which have json dummy contenthttps://swapi.co/api/people/1https://randomuser.me/api/?results=500IF we open any of these urls n postman we can see the entire range of data for each objectComponentDidMount(){} - one of the lifecycle methods of a component which in this case means that this function will run before the class component is rendered to the pageStructure of how is sits is between the constructor and render methodsFirst Example*/class Profile extends React.Component{				constructor(props){						super(props)						this.state = {							character: [] // set state to a blank object as we know the data is object based json data						}				}// close constructor				componentDidMount(){						fetch('https:randomuser.me/api/?inc=gender,name,nat')						.then(result => result.json()) // converts the data from an api to json, then onto data which is						.then(data => { 							//console.log(data) - test the data is loading in the console							this.setState({ 		                    character: data //  then passed as the new state in the character object		                		})						})				} // close DidMount													render(){						const { character } = this.state						return(								<h2>{character.name}</h2>							)				} // close render} //close componentexport default Profile;/* =================================ROUTINGhttps://github.com/ReactTraining/react-router/tree/0e6f1a37a2540595e776858c52e924cc74590d6b/packages/react-router#installation=================================*/	/* Routing allows us to direct links from one page to another,or to make us clock to a component on a pageSo if we clock on a shop component, we go to a shop page ...*//* First we need to exot from the app and install react router */$ npm install --save react-router/* Then use 'npm start' to go back into the app once react router has been installed *//* On the App.js that is being rendered, we need to import react router */import { BrowserRouter as Router, Route, Switch } from "react-router-dom";/* Notice is had three parameters 	1. BrowserRouter (renamed to Router)	2. Route (tag)	3. and Switch which will output links without confliction '/'*//* Sample App.js file*/import React from 'react';import './App.css';import { BrowserRouter as Router, Route, Switch } from "react-router-dom";import Nav from './Nav';import Home from './Home'import About from './About';import Shop from './Shop';function App() {   const home = () => {     return <h1>Home</h1>     /* this will be used inside the Route Cpomponent with home */    }  return (    <Router>    <div className="App">                <Nav />                <switch>                <Route exact path="/" component={home} />                <Route path="/about" component={About} />                <Route path="/shop" component={Shop} />                </switch>    </div>    </Router>  );}export default App;/* We import react-router-dom,import all our components nav.js and our pages, about, shop etcWhen returing the render, we wrap the JSX inside <router> tagTHen wrap all our link comonents inside a <switch> tag.What the <route>'s are saying....<Route exact path="/" component={home} /> This says, anything after the url + / go to the home page<Route path="/about" component={About} />This says, go to the url + component called about<Route path="/shop" component={Shop} />This says, go to the url + component called shopNoww...If we type site.com/ we are brought to homepageIf we type site.com/about we are brought to about pageIf we type site.com/shop we are brought to shop page*//*=====================LINKING THE NAVIGATION =====================*/	/* Here is the finished navigation page */import React from 'react';import { Link } from 'react-router-dom';import './App.css';function Nav() {	const linkStyle = {      color: 'white'  }  return (		   <nav>		   		<h3>Logo</h3>		   		<ul className="navlinks">		   			<li>		   			<Link to="/about" style={linkStyle}>About</Link>		   			</li>		   			<li>		   			<Link to="/shop" style={linkStyle}>Shop</Link>		   			</li>		   		</ul>		   </nav>  );}export default Nav;/* First we import { Link } from react router dom  Previously in the html we add the links to the <li> element as the <link> tag provides the <a><ul className="navlinks">	 <li>Link 1</li>	  <li>Link 2</li></ul>becomes<ul className="navlinks">		   			<li>		   			<Link to="/about" style={linkStyle}>About</Link>		   			</li>		   			<li>		   			<Link to="/shop" style={linkStyle}>Shop</Link>		   			</li>		   		</ul>We use the <link> inside the <li> and give it an attribute of to="" and place the path at the endNow the pages should link. */